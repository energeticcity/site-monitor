name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sitewatcher
  TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sitewatcher_test
  JWT_SECRET: test-secret-key-for-ci-only-min-32-chars
  WORKER_BASE_URL: https://your-worker.workers.dev
  SKIP_CONTRACT_TESTS: true
  E2E_USE_REAL_WORKER: false

jobs:
  api-tests:
    name: API Tests & Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sitewatcher
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd apps/api
          pip install -e ".[dev]"

      - name: Create test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE sitewatcher_test;"

      - name: Run migrations
        run: |
          cd apps/api
          alembic upgrade head

      - name: Run tests with coverage
        run: |
          cd apps/api
          pytest -v --cov=app --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=90

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/api/coverage.xml
          flags: api
          fail_ci_if_error: false

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-coverage
          path: apps/api/htmlcov

  api-lint:
    name: API Lint & Typecheck
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd apps/api
          pip install -e ".[dev]"

      - name: Run ruff check
        run: |
          cd apps/api
          ruff check .

      - name: Run ruff format check
        run: |
          cd apps/api
          ruff format --check .

      - name: Run mypy
        run: |
          cd apps/api
          mypy app

  web-tests:
    name: Web Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build shared package
        run: |
          cd packages/shared
          npm run build

      - name: Run web tests with coverage
        run: |
          cd apps/web
          npm run test:coverage

      - name: Check coverage thresholds
        run: |
          cd apps/web
          npm run test:coverage -- --reporter=json --outputFile=coverage/coverage.json
          # Vitest will fail if coverage is below thresholds

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./apps/web/coverage/lcov.info
          flags: web
          fail_ci_if_error: false

  web-lint:
    name: Web Lint & Typecheck
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: |
          cd apps/web
          npm run lint

      - name: Run TypeScript check
        run: |
          cd apps/web
          npm run typecheck

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sitewatcher
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install API dependencies
        run: |
          cd apps/api
          pip install -e ".[dev]"

      - name: Run migrations
        run: |
          cd apps/api
          alembic upgrade head

      - name: Seed database
        run: |
          cd infra/db
          python seed.py

      - name: Install dependencies
        run: npm install

      - name: Install Playwright
        run: |
          cd tests/e2e
          npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: |
          cd tests/e2e
          npx playwright test

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: tests/e2e/playwright-report

      - name: Upload Playwright traces
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-traces
          path: tests/e2e/test-results

  contract-tests:
    name: Contract Tests (Worker)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd tests/contracts
          pip install -r requirements.txt

      - name: Run contract tests
        run: |
          cd tests/contracts
          pytest -v
        env:
          SKIP_CONTRACT_TESTS: true

  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd apps/api
          pip install -e ".[dev]"

      - name: Run security tests
        run: |
          cd apps/api
          pytest -v -m security

  build-check:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build shared package
        run: |
          cd packages/shared
          npm run build

      - name: Build web
        run: |
          cd apps/web
          npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000

  all-checks-passed:
    name: All Checks Passed
    needs:
      - api-tests
      - api-lint
      - web-tests
      - web-lint
      - e2e-tests
      - contract-tests
      - security-checks
      - build-check
    runs-on: ubuntu-latest
    steps:
      - name: All checks passed
        run: echo "âœ… All quality gates passed! Ready for deployment."

